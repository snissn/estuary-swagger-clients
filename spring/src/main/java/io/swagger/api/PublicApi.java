/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.35).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-09-27T20:41:13.008650-10:00[Pacific/Honolulu]")
@Validated
public interface PublicApi {

    @Operation(summary = "Get Content by Cid", description = "This endpoint returns the content associated with a CID", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "public" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/public/by-cid/{cid}",
        method = RequestMethod.GET)
    ResponseEntity<Void> publicByCidCidGet(@Parameter(in = ParameterIn.PATH, description = "Cid", required=true, schema=@Schema()) @PathVariable("cid") String cid);


    @Operation(summary = "Get storage failures", description = "This endpoint returns a list of storage failures", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "deals" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/public/deals/failures",
        method = RequestMethod.GET)
    ResponseEntity<Void> publicDealsFailuresGet();


    @Operation(summary = "Get public node info", description = "This endpoint returns information about the node", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "public" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/public/info",
        method = RequestMethod.GET)
    ResponseEntity<Void> publicInfoGet();


    @Operation(summary = "Get deal metrics", description = "This endpoint is used to get deal metrics", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "public", "metrics" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/public/metrics/deals-on-chain",
        method = RequestMethod.GET)
    ResponseEntity<Void> publicMetricsDealsOnChainGet();


    @Operation(summary = "Get all miners deals", description = "This endpoint returns all miners deals", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "public", "miner" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/public/miners/deals/{miner}",
        method = RequestMethod.GET)
    ResponseEntity<Void> publicMinersDealsMinerGet(@Parameter(in = ParameterIn.PATH, description = "Filter by miner", required=true, schema=@Schema()) @PathVariable("miner") String miner);


    @Operation(summary = "Get all miners", description = "This endpoint returns all miners", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "public", "net" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/public/miners/failures/{miner}",
        method = RequestMethod.GET)
    ResponseEntity<Void> publicMinersFailuresMinerGet(@Parameter(in = ParameterIn.PATH, description = "Filter by miner", required=true, schema=@Schema()) @PathVariable("miner") String miner);


    @Operation(summary = "Get all miners", description = "This endpoint returns all miners", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "public", "net" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/public/miners",
        method = RequestMethod.GET)
    ResponseEntity<Void> publicMinersGet();


    @Operation(summary = "Get miner stats", description = "This endpoint returns miner stats", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "public", "miner" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/public/miners/stats/{miner}",
        method = RequestMethod.GET)
    ResponseEntity<Void> publicMinersStatsMinerGet(@Parameter(in = ParameterIn.PATH, description = "Filter by miner", required=true, schema=@Schema()) @PathVariable("miner") String miner);


    @Operation(summary = "Query Ask", description = "This endpoint returns the ask for a given CID", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "deals" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/public/miners/storage/query/{miner}",
        method = RequestMethod.GET)
    ResponseEntity<Void> publicMinersStorageQueryMinerGet(@Parameter(in = ParameterIn.PATH, description = "CID", required=true, schema=@Schema()) @PathVariable("miner") String miner);


    @Operation(summary = "Net Addrs", description = "This endpoint is used to get net addrs", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "public", "net" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))) })
    @RequestMapping(value = "/public/net/addrs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<String>> publicNetAddrsGet();


    @Operation(summary = "Net Peers", description = "This endpoint is used to get net peers", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "public", "net" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))) })
    @RequestMapping(value = "/public/net/peers",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<String>> publicNetPeersGet();


    @Operation(summary = "Public stats", description = "This endpoint is used to get public stats.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "public" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/public/stats",
        method = RequestMethod.GET)
    ResponseEntity<Void> publicStatsGet();

}

