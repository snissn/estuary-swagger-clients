/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.35).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.MainImportDealBody;
import org.springframework.core.io.Resource;
import io.swagger.model.UtilContentAddIpfsBody;
import io.swagger.model.UtilContentAddResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-09-27T20:41:13.008650-10:00[Pacific/Honolulu]")
@Validated
public interface ContentApi {

    @Operation(summary = "Add Car object", description = "This endpoint is used to add a car object to the network. The object can be a file or a directory.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "content" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/content/add-car",
        consumes = { "*/*" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> contentAddCarPost(@Parameter(in = ParameterIn.DEFAULT, description = "Car", required=true, schema=@Schema()) @Valid @RequestBody String body, @Parameter(in = ParameterIn.QUERY, description = "Filename" ,schema=@Schema()) @Valid @RequestParam(value = "filename", required = false) String filename, @Parameter(in = ParameterIn.QUERY, description = "Commp" ,schema=@Schema()) @Valid @RequestParam(value = "commp", required = false) String commp, @Parameter(in = ParameterIn.QUERY, description = "Size" ,schema=@Schema()) @Valid @RequestParam(value = "size", required = false) String size);


    @Operation(summary = "Add IPFS object", description = "This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "content" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/content/add-ipfs",
        consumes = { "*/*" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> contentAddIpfsPost(@Parameter(in = ParameterIn.DEFAULT, description = "IPFS Body", required=true, schema=@Schema()) @Valid @RequestBody UtilContentAddIpfsBody body);


    @Operation(summary = "Add new content", description = "This endpoint is used to upload new content.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "content" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UtilContentAddResponse.class))) })
    @RequestMapping(value = "/content/add",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" }, 
        method = RequestMethod.POST)
    ResponseEntity<UtilContentAddResponse> contentAddPost(@Parameter(in = ParameterIn.PATH, description = "Collection UUID", required=true, schema=@Schema()) @PathVariable("coluuid") String coluuid, @Parameter(in = ParameterIn.PATH, description = "Directory", required=true, schema=@Schema()) @PathVariable("dir") String dir, @Parameter(description = "file detail") @Valid @RequestPart("file") MultipartFile file);


    @Operation(summary = "Get aggregated content stats", description = "This endpoint returns aggregated content stats", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "content" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/content/aggregated/{content}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> contentAggregatedContentGet(@Parameter(in = ParameterIn.PATH, description = "Content ID", required=true, schema=@Schema()) @PathVariable("content") String content);


    @Operation(summary = "Get all deals for a user", description = "This endpoint is used to get all deals for a user", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "content" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/content/all-deals",
        method = RequestMethod.GET)
    ResponseEntity<Void> contentAllDealsGet(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Begin" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "begin", required = true) String begin, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Duration" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "duration", required = true) String duration, @NotNull @Parameter(in = ParameterIn.QUERY, description = "All" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "all", required = true) String all);


    @Operation(summary = "Get content bandwidth", description = "This endpoint returns content bandwidth", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "content" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/content/bw-usage/{content}",
        method = RequestMethod.GET)
    ResponseEntity<Void> contentBwUsageContentGet(@Parameter(in = ParameterIn.PATH, description = "Content ID", required=true, schema=@Schema()) @PathVariable("content") String content);


    @Operation(summary = "Add a new content", description = "This endpoint adds a new content", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "content" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/content/create",
        consumes = { "*/*" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> contentCreatePost(@Parameter(in = ParameterIn.DEFAULT, description = "Content", required=true, schema=@Schema()) @Valid @RequestBody String body);


    @Operation(summary = "Content with deals", description = "This endpoint lists all content with deals", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "content" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/content/deals",
        method = RequestMethod.GET)
    ResponseEntity<Void> contentDealsGet(@Parameter(in = ParameterIn.QUERY, description = "Limit" ,schema=@Schema()) @Valid @RequestParam(value = "limit", required = false) Integer limit, @Parameter(in = ParameterIn.QUERY, description = "Offset" ,schema=@Schema()) @Valid @RequestParam(value = "offset", required = false) Integer offset);


    @Operation(summary = "Ensure Replication", description = "This endpoint ensures that the content is replicated to the specified number of providers", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "content" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/content/ensure-replication/{datacid}",
        method = RequestMethod.GET)
    ResponseEntity<Void> contentEnsureReplicationDatacidGet(@Parameter(in = ParameterIn.PATH, description = "Data CID", required=true, schema=@Schema()) @PathVariable("datacid") String datacid);


    @Operation(summary = "List all failures for a content", description = "This endpoint returns all failures for a content", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "content" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/content/failures/{content}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> contentFailuresContentGet(@Parameter(in = ParameterIn.PATH, description = "Content ID", required=true, schema=@Schema()) @PathVariable("content") String content);


    @Operation(summary = "Import a deal", description = "This endpoint imports a deal into the shuttle.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "content" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/content/importdeal",
        consumes = { "*/*" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> contentImportdealPost(@Parameter(in = ParameterIn.DEFAULT, description = "Import a deal", required=true, schema=@Schema()) @Valid @RequestBody MainImportDealBody body);


    @Operation(summary = "List all pinned content", description = "This endpoint lists all content", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "content" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))) })
    @RequestMapping(value = "/content/list",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<String>> contentListGet();


    @Operation(summary = "Read content", description = "This endpoint reads content from the blockstore", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "content" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/content/read/{cont}",
        method = RequestMethod.GET)
    ResponseEntity<Void> contentReadContGet(@Parameter(in = ParameterIn.PATH, description = "CID", required=true, schema=@Schema()) @PathVariable("cont") String cont);


    @Operation(summary = "Get staging zone for user", description = "This endpoint is used to get staging zone for user.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "content" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/content/staging-zones",
        method = RequestMethod.GET)
    ResponseEntity<Void> contentStagingZonesGet();


    @Operation(summary = "Get content statistics", description = "This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a conten", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "content" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/content/stats",
        method = RequestMethod.GET)
    ResponseEntity<Void> contentStatsGet(@Parameter(in = ParameterIn.PATH, description = "limit", required=true, schema=@Schema()) @PathVariable("limit") String limit);


    @Operation(summary = "Content Status", description = "This endpoint returns the status of a content", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "content" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/content/status/{id}",
        method = RequestMethod.GET)
    ResponseEntity<Void> contentStatusIdGet(@Parameter(in = ParameterIn.PATH, description = "Content ID", required=true, schema=@Schema()) @PathVariable("id") Integer id);

}

