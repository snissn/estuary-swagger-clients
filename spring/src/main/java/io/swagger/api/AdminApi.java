/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.35).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-09-27T20:41:13.008650-10:00[Pacific/Honolulu]")
@Validated
public interface AdminApi {

    @Operation(summary = "Register autoretrieve server", description = "This endpoint registers a new autoretrieve server", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "autoretrieve" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/admin/autoretrieve/init",
        consumes = { "*/*" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> adminAutoretrieveInitPost(@Parameter(in = ParameterIn.DEFAULT, description = "Autoretrieve's public key", required=true, schema=@Schema()) @Valid @RequestBody String body);


    @Operation(summary = "List autoretrieve servers", description = "This endpoint lists all registered autoretrieve servers", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "autoretrieve" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/admin/autoretrieve/list",
        method = RequestMethod.GET)
    ResponseEntity<Void> adminAutoretrieveListGet();


    @Operation(summary = "Remove peers on Peering Service", description = "This endpoint can be used to remove a Peer from the Peering Service", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "admin", "peering", "peers" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/admin/peering/peers",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> adminPeeringPeersDelete();


    @Operation(summary = "List all Peering peers", description = "This endpoint can be used to list all peers on Peering Service", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "admin", "peering", "peers" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/admin/peering/peers",
        method = RequestMethod.GET)
    ResponseEntity<Void> adminPeeringPeersGet();


    @Operation(summary = "Add peers on Peering Service", description = "This endpoint can be used to add a Peer from the Peering Service", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "admin", "peering", "peers" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/admin/peering/peers",
        method = RequestMethod.POST)
    ResponseEntity<Void> adminPeeringPeersPost();


    @Operation(summary = "Start Peering", description = "This endpoint can be used to start the Peering Service", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "admin", "peering", "peers" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/admin/peering/start",
        method = RequestMethod.POST)
    ResponseEntity<Void> adminPeeringStartPost();


    @Operation(summary = "Check Peering Status", description = "This endpoint can be used to check the Peering status", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "admin", "peering", "peers" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/admin/peering/status",
        method = RequestMethod.GET)
    ResponseEntity<Void> adminPeeringStatusGet();


    @Operation(summary = "Stop Peering", description = "This endpoint can be used to stop the Peering Service", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "admin", "peering", "peers" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/admin/peering/stop",
        method = RequestMethod.POST)
    ResponseEntity<Void> adminPeeringStopPost();


    @Operation(summary = "Get systems(estuary/shuttle) config", description = "This endpoint is used to get system configs.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "admin" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/admin/system/config",
        method = RequestMethod.GET)
    ResponseEntity<Void> adminSystemConfigGet();


    @Operation(summary = "Get all users", description = "This endpoint is used to get all users.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "admin" })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/admin/users",
        method = RequestMethod.GET)
    ResponseEntity<Void> adminUsersGet();

}

