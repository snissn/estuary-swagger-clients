//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class UserAPI {
    /**
     Get API keys for a user

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userApiKeysGet(completion: @escaping ((_ data: [MainGetApiKeysResp]?,_ error: Error?) -> Void)) {
        userApiKeysGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get API keys for a user
     - GET /user/api-keys

     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example=[ {
  "expiry" : "expiry",
  "token" : "token"
}, {
  "expiry" : "expiry",
  "token" : "token"
} ]}]

     - returns: RequestBuilder<[MainGetApiKeysResp]> 
     */
    open class func userApiKeysGetWithRequestBuilder() -> RequestBuilder<[MainGetApiKeysResp]> {
        let path = "/user/api-keys"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[MainGetApiKeysResp]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Revoke a User API Key.

     - parameter key: (path) Key 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userApiKeysKeyDelete(key: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userApiKeysKeyDeleteWithRequestBuilder(key: key).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Revoke a User API Key.
     - DELETE /user/api-keys/{key}

     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - parameter key: (path) Key 

     - returns: RequestBuilder<Void> 
     */
    open class func userApiKeysKeyDeleteWithRequestBuilder(key: String) -> RequestBuilder<Void> {
        var path = "/user/api-keys/{key}"
        let keyPreEscape = "\(key)"
        let keyPostEscape = keyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{key}", with: keyPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create API keys for a user

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userApiKeysPost(completion: @escaping ((_ data: MainGetApiKeysResp?,_ error: Error?) -> Void)) {
        userApiKeysPostWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create API keys for a user
     - POST /user/api-keys

     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "expiry" : "expiry",
  "token" : "token"
}}]

     - returns: RequestBuilder<MainGetApiKeysResp> 
     */
    open class func userApiKeysPostWithRequestBuilder() -> RequestBuilder<MainGetApiKeysResp> {
        let path = "/user/api-keys"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MainGetApiKeysResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Export user data

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userExportGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        userExportGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Export user data
     - GET /user/export

     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func userExportGetWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/user/export"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Create API keys for a user

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userStatsGet(completion: @escaping ((_ data: MainUserStatsResponse?,_ error: Error?) -> Void)) {
        userStatsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create API keys for a user
     - GET /user/stats

     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "totalSize" : 6,
  "numPins" : 0
}}]

     - returns: RequestBuilder<MainUserStatsResponse> 
     */
    open class func userStatsGetWithRequestBuilder() -> RequestBuilder<MainUserStatsResponse> {
        let path = "/user/stats"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MainUserStatsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
