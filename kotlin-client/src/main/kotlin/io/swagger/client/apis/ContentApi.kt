/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.MainimportDealBody
import io.swagger.client.models.UtilContentAddIpfsBody
import io.swagger.client.models.UtilContentAddResponse

import io.swagger.client.infrastructure.*

class ContentApi(basePath: kotlin.String = "//api.estuary.tech/") : ApiClient(basePath) {

    /**
     * Add Car object
     * This endpoint is used to add a car object to the network. The object can be a file or a directory.
     * @param body Car 
     * @param filename Filename (optional)
     * @param commp Commp (optional)
     * @param size Size (optional)
     * @return void
     */
    fun contentAddCarPost(body: kotlin.String, filename: kotlin.String? = null, commp: kotlin.String? = null, size: kotlin.String? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("filename" to listOf("$filename"), "commp" to listOf("$commp"), "size" to listOf("$size"))
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/content/add-car", query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Add IPFS object
     * This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.
     * @param body IPFS Body 
     * @return void
     */
    fun contentAddIpfsPost(body: UtilContentAddIpfsBody): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/content/add-ipfs"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Add new content
     * This endpoint is used to upload new content.
     * @param file  
     * @param coluuid Collection UUID 
     * @param dir Directory 
     * @return UtilContentAddResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun contentAddPost(file: kotlin.Array<kotlin.Byte>, coluuid: kotlin.String, dir: kotlin.String): UtilContentAddResponse {
        val localVariableBody: kotlin.Any? = mapOf("file" to "$file")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/content/add".replace("{" + "coluuid" + "}", "$coluuid").replace("{" + "dir" + "}", "$dir"), headers = localVariableHeaders
        )
        val response = request<UtilContentAddResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UtilContentAddResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get aggregated content stats
     * This endpoint returns aggregated content stats
     * @param content Content ID 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun contentAggregatedContentGet(content: kotlin.String): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/content/aggregated/{content}".replace("{" + "content" + "}", "$content")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get all deals for a user
     * This endpoint is used to get all deals for a user
     * @param begin Begin 
     * @param duration Duration 
     * @param all All 
     * @return void
     */
    fun contentAllDealsGet(begin: kotlin.String, duration: kotlin.String, all: kotlin.String): Unit {
        val localVariableQuery: MultiValueMap = mapOf("begin" to listOf("$begin"), "duration" to listOf("$duration"), "all" to listOf("$all"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/content/all-deals", query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get content bandwidth
     * This endpoint returns content bandwidth
     * @param content Content ID 
     * @return void
     */
    fun contentBwUsageContentGet(content: kotlin.String): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/content/bw-usage/{content}".replace("{" + "content" + "}", "$content")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Add a new content
     * This endpoint adds a new content
     * @param body Content 
     * @return void
     */
    fun contentCreatePost(body: kotlin.String): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/content/create"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Content with deals
     * This endpoint lists all content with deals
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @return void
     */
    fun contentDealsGet(limit: kotlin.Int? = null, offset: kotlin.Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/content/deals", query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Ensure Replication
     * This endpoint ensures that the content is replicated to the specified number of providers
     * @param datacid Data CID 
     * @return void
     */
    fun contentEnsureReplicationDatacidGet(datacid: kotlin.String): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/content/ensure-replication/{datacid}".replace("{" + "datacid" + "}", "$datacid")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List all failures for a content
     * This endpoint returns all failures for a content
     * @param content Content ID 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun contentFailuresContentGet(content: kotlin.String): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/content/failures/{content}".replace("{" + "content" + "}", "$content")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Import a deal
     * This endpoint imports a deal into the shuttle.
     * @param body Import a deal 
     * @return void
     */
    fun contentImportdealPost(body: MainimportDealBody): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/content/importdeal"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List all pinned content
     * This endpoint lists all content
     * @return kotlin.Array<kotlin.String>
     */
    @Suppress("UNCHECKED_CAST")
    fun contentListGet(): kotlin.Array<kotlin.String> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/content/list"
        )
        val response = request<kotlin.Array<kotlin.String>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.String>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read content
     * This endpoint reads content from the blockstore
     * @param cont CID 
     * @return void
     */
    fun contentReadContGet(cont: kotlin.String): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/content/read/{cont}".replace("{" + "cont" + "}", "$cont")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get staging zone for user
     * This endpoint is used to get staging zone for user.
     * @return void
     */
    fun contentStagingZonesGet(): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/content/staging-zones"
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get content statistics
     * This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a conten
     * @param limit limit 
     * @return void
     */
    fun contentStatsGet(limit: kotlin.String): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/content/stats".replace("{" + "limit" + "}", "$limit")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Content Status
     * This endpoint returns the status of a content
     * @param id Content ID 
     * @return void
     */
    fun contentStatusIdGet(id: kotlin.Int): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/content/status/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
