/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis


import io.swagger.client.infrastructure.*

class PeeringApi(basePath: kotlin.String = "//api.estuary.tech/") : ApiClient(basePath) {

    /**
     * Remove peers on Peering Service
     * This endpoint can be used to remove a Peer from the Peering Service
     * @return void
     */
    fun adminPeeringPeersDelete(): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/admin/peering/peers"
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List all Peering peers
     * This endpoint can be used to list all peers on Peering Service
     * @return void
     */
    fun adminPeeringPeersGet(): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/admin/peering/peers"
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Add peers on Peering Service
     * This endpoint can be used to add a Peer from the Peering Service
     * @return void
     */
    fun adminPeeringPeersPost(): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/admin/peering/peers"
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Start Peering
     * This endpoint can be used to start the Peering Service
     * @return void
     */
    fun adminPeeringStartPost(): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/admin/peering/start"
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Check Peering Status
     * This endpoint can be used to check the Peering status
     * @return void
     */
    fun adminPeeringStatusGet(): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/admin/peering/status"
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Stop Peering
     * This endpoint can be used to stop the Peering Service
     * @return void
     */
    fun adminPeeringStopPost(): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/admin/peering/stop"
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
