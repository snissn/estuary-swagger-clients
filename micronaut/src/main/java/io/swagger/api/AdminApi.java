/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.35).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.micronaut.http.*;
import io.micronaut.http.annotation.*;
import io.reactivex.Single;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.responses.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Nullable;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.MicronautCodegen", date = "2022-09-27T20:40:53.180766-10:00[Pacific/Honolulu]")
@Controller
public interface AdminApi {


    @Operation(summary = "Register autoretrieve server", operationId = "adminAutoretrieveInitPost", description = "This endpoint registers a new autoretrieve server" , tags = {"autoretrieve"})
    @Post(value = "/admin/autoretrieve/init", consumes = {"*/*"})
    default Single<HttpResponse<Void>> adminAutoretrieveInitPost(@Parameter(description = "Autoretrieve's public key") @Valid @Body String body
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "List autoretrieve servers", operationId = "adminAutoretrieveListGet", description = "This endpoint lists all registered autoretrieve servers" , tags = {"autoretrieve"})
    @Get(value = "/admin/autoretrieve/list")
    default Single<HttpResponse<Void>> adminAutoretrieveListGet() {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Remove peers on Peering Service", operationId = "adminPeeringPeersDelete", description = "This endpoint can be used to remove a Peer from the Peering Service" , tags = {"admin", "peering", "peers"})
    @Delete(value = "/admin/peering/peers")
    default Single<HttpResponse<Void>> adminPeeringPeersDelete() {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "List all Peering peers", operationId = "adminPeeringPeersGet", description = "This endpoint can be used to list all peers on Peering Service" , tags = {"admin", "peering", "peers"})
    @Get(value = "/admin/peering/peers")
    default Single<HttpResponse<Void>> adminPeeringPeersGet() {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Add peers on Peering Service", operationId = "adminPeeringPeersPost", description = "This endpoint can be used to add a Peer from the Peering Service" , tags = {"admin", "peering", "peers"})
    @Post(value = "/admin/peering/peers")
    default Single<HttpResponse<Void>> adminPeeringPeersPost() {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Start Peering", operationId = "adminPeeringStartPost", description = "This endpoint can be used to start the Peering Service" , tags = {"admin", "peering", "peers"})
    @Post(value = "/admin/peering/start")
    default Single<HttpResponse<Void>> adminPeeringStartPost() {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Check Peering Status", operationId = "adminPeeringStatusGet", description = "This endpoint can be used to check the Peering status" , tags = {"admin", "peering", "peers"})
    @Get(value = "/admin/peering/status")
    default Single<HttpResponse<Void>> adminPeeringStatusGet() {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Stop Peering", operationId = "adminPeeringStopPost", description = "This endpoint can be used to stop the Peering Service" , tags = {"admin", "peering", "peers"})
    @Post(value = "/admin/peering/stop")
    default Single<HttpResponse<Void>> adminPeeringStopPost() {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Get systems(estuary/shuttle) config", operationId = "adminSystemConfigGet", description = "This endpoint is used to get system configs." , tags = {"admin"})
    @Get(value = "/admin/system/config")
    default Single<HttpResponse<Void>> adminSystemConfigGet() {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Get all users", operationId = "adminUsersGet", description = "This endpoint is used to get all users." , tags = {"admin"})
    @Get(value = "/admin/users")
    default Single<HttpResponse<Void>> adminUsersGet() {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }

}
